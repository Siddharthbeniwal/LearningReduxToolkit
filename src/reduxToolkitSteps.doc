Steps for Using redux-toolkit:

*********************************************************************************************************************************
1. Install Redux Toolkit and React-Redux ==>

-Add the Redux Toolkit and React-Redux packages to your project:

npm install @reduxjs/toolkit react-redux
__________________________________________________________________________________________________________________________________

2. Create a Redux Store ==>

- Create a 'store.js' file in 'src' folder to make store for our app.
- in this file, use 'configureStore' method provided by redux toolkit to make the store.

Note:
-This store is the single source of truth.

-----------------------------------------------------
eg-

app/store.js:

import { configureStore } from '@reduxjs/toolkit'

export default configureStore({
  reducer: {}
})
-----------------------------------------------------

This creates a Redux store, and also automatically configure the Redux DevTools extension.
We will add our reducer names in the store in future
__________________________________________________________________________________________________________________________________

3. Provide the Redux Store to React ==>

Once the store is created, we can make it available to our React components by putting a React-Redux <Provider> around
our application in src/index.js. Import the Redux store we just created, put a <Provider> around your <App>, and pass
the store as a prop:

-----------------------------------------------------
eg-

import React from 'react'
import ReactDOM from 'react-dom'
import './index.css'
import App from './App'
import store from './app/store'
import { Provider } from 'react-redux'

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
)
__________________________________________________________________________________________________________________________________

4. Create a Redux State Slice ==>

Add a new file named src/features/counter/counterSlice.js. In that file, import the createSlice API from Redux Toolkit.

Creating a slice requires a string name to identify the slice, an initial state value, and one or more reducer functions to
define how the state can be updated. Once a slice is created, we can export the generated Redux action creators and the
reducer function for the whole slice.

Note:
-Redux requires that we write all state updates immutably, by making copies of data and updating the copies.
However, Redux Toolkit's createSlice and createReducer APIs use Immer inside to allow us to write "mutating" update logic
that becomes correct immutable updates.

-----------------------------------------------------
eg-

features/counter/counterSlice.js:

import { createSlice } from '@reduxjs/toolkit'

export const counterSlice = createSlice({
  name: 'counter',
  initialState: {
    value: 0
  },
  reducers: {
    increment: state => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1
    },
    decrement: state => {
      state.value -= 1
    },
    incrementByAmount: (state, action) => {
      state.value += action.payload
    }
  }
})

// Action creators are generated for each case reducer function
export const { increment, decrement, incrementByAmount } = counterSlice.actions

export default counterSlice.reducer


__________________________________________________________________________________________________________________________________

5. Add Slice Reducers to the Store ==>

Next, we need to import the reducer function from the counter slice and add it to our store. By defining a field inside the
reducer parameter, we tell the store to use this slice reducer function to handle all updates to that state.

-----------------------------------------------------
eg-

app/store.js:

import { configureStore } from '@reduxjs/toolkit'
import counterReducer from '../features/counter/counterSlice'

export default configureStore({
  reducer: {
    counter: counterReducer
  }
})

__________________________________________________________________________________________________________________________________

6. Use Redux State and Actions in React Components ==>

Now we can use the React-Redux hooks to let React components interact with the Redux store. We can read data from the store
with useSelector, and dispatch actions using useDispatch. Create a src/features/counter/Counter.js file with a <Counter> component
inside, then import that component into App.js and render it inside of <App>.


-----------------------------------------------------
eg-

features/counter/Counter.js:

import React from 'react'
import { useSelector, useDispatch } from 'react-redux'
import { decrement, increment } from './counterSlice'
import styles from './Counter.module.css'

export function Counter() {
  const count = useSelector(state => state.counter.value)
  const dispatch = useDispatch()

  return (
    <div>
      <div>
        <button
          aria-label="Increment value"
          onClick={() => dispatch(increment())}
        >
          Increment
        </button>
        <span>{count}</span>
        <button
          aria-label="Decrement value"
          onClick={() => dispatch(decrement())}
        >
          Decrement
        </button>
      </div>
    </div>
  )
}

__________________________________________________________________________________________________________________________________

Now, any time you click the "Increment" and "Decrement" buttons:

The corresponding Redux action will be dispatched to the store
The counter slice reducer will see the actions and update its state
The <Counter> component will see the new state value from the store and re-render itself with the new data

